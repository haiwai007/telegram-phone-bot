name: 🤖 Telegram机器人24小时运行

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # 每天重启一次 (UTC 00:00, 北京时间 08:00)
    - cron: '0 0 * * *'

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 1440  # 24小时超时 (1440分钟)
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        # 检查文件是否存在
        ls -la
        if [ -f "requirements.txt" ]; then
          echo "✅ 找到 requirements.txt"
          pip install -r requirements.txt
        else
          echo "❌ 未找到 requirements.txt，使用手动安装"
          pip install python-telegram-bot==20.8 python-dotenv==1.0.1 requests==2.31.0 pytz==2023.3
        fi
        
    - name: 🔧 配置环境
      run: |
        mkdir -p 配置文件
        echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > 配置文件/环境配置.env
        echo "LOG_LEVEL=INFO" >> 配置文件/环境配置.env
        echo "TIMEZONE=Asia/Shanghai" >> 配置文件/环境配置.env
        echo "DATABASE_PATH=phone_records.db" >> 配置文件/环境配置.env
        
    - name: 🧪 测试机器人连接
      run: |
        python -c "
        import requests
        import os
        from dotenv import load_dotenv
        
        load_dotenv('配置文件/环境配置.env')
        bot_token = os.getenv('BOT_TOKEN')
        
        if not bot_token:
            print('❌ BOT_TOKEN 未设置')
            exit(1)
            
        try:
            response = requests.get(f'https://api.telegram.org/bot{bot_token}/getMe', timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data['ok']:
                    bot_info = data['result']
                    print(f'✅ 机器人连接成功')
                    print(f'🤖 机器人名称: {bot_info[\"first_name\"]}')
                    print(f'👤 用户名: @{bot_info[\"username\"]}')
                    print(f'🆔 ID: {bot_info[\"id\"]}')
                else:
                    print(f'❌ API返回错误: {data}')
                    exit(1)
            else:
                print(f'❌ HTTP错误: {response.status_code}')
                exit(1)
        except Exception as e:
            print(f'❌ 连接失败: {e}')
            exit(1)
        "
        
    - name: 🚀 启动机器人24小时运行
      run: |
        echo "🤖 启动Telegram客户号码统计机器人..."
        echo "⏰ 开始时间: $(date)"
        echo "🔄 将运行24小时后自动重启"
        echo "📊 24小时持续运行模式"

        # 启动机器人，运行24小时 (86400秒)
        timeout 86400 python 启动机器人.py || {
          echo "⚠️ 机器人运行24小时完成，准备重启..."
          echo "⏰ 结束时间: $(date)"
          exit 0
        }
        
    - name: 📊 上传日志和数据
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bot-data-${{ github.run_number }}
        path: |
          *.log
          *.db
        retention-days: 7
