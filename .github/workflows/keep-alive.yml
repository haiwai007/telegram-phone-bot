name: 🔄 保持机器人运行

on:
  schedule:
    # 每5小时50分钟启动一次，确保连续运行
    - cron: '50 */5 * * *'
  workflow_dispatch:

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6小时超时
    strategy:
      matrix:
        instance: [1, 2, 3]  # 3个并行实例
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        # 检查文件是否存在
        if [ -f "requirements.txt" ]; then
          echo "✅ 找到 requirements.txt"
          pip install -r requirements.txt
        else
          echo "❌ 未找到 requirements.txt，使用手动安装"
          pip install python-telegram-bot==20.8 python-dotenv==1.0.1 requests==2.31.0 pytz==2023.3
        fi
        
    - name: 🔧 配置环境
      run: |
        mkdir -p 配置文件
        echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > 配置文件/环境配置.env
        echo "LOG_LEVEL=INFO" >> 配置文件/环境配置.env
        echo "TIMEZONE=Asia/Shanghai" >> 配置文件/环境配置.env
        echo "DATABASE_PATH=phone_records.db" >> 配置文件/环境配置.env
        
    - name: 🚀 启动机器人实例 ${{ matrix.instance }}
      run: |
        echo "🤖 启动机器人实例 ${{ matrix.instance }}..."
        echo "⏰ 开始时间: $(date)"
        echo "🔄 将运行约6小时"
        
        # 启动机器人，设置超时
        timeout 21000 python 启动机器人.py || {
          echo "⚠️ 实例 ${{ matrix.instance }} 运行超时，正常结束"
          echo "⏰ 结束时间: $(date)"
          exit 0
        }
        
    - name: 📊 上传实例日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: instance-${{ matrix.instance }}-logs-${{ github.run_number }}
        path: |
          *.log
          *.db
        retention-days: 3
